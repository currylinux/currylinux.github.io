[{"categories":null,"content":"1. Gogs简单介绍 Gogs简单介绍 什么是Gogs? Gogs 是一款极易搭建的自助 Git 服务。 开发目的: Gogs 的目标是打造一个最简单、最快速和最轻松的方式搭建自助Git服务.使用Go语言开发使得Gogs能够通过独立的二进制分发, 并且支持Go语言支持的所有平台,包括 Linux、Mac OS X、Windows以及ARM平台 2. Gogs的docker环境及部署流程 docker和compose的安装此处就省略,基于以上环境的基础上,直接部署 pwd /root/gogs-project 配置docker-compose cat docker-compose.yaml version: '2.3' services: mysql-gogs: container_name: mysql-gogs image: mysql:5.7 restart: always volumes: - /data/mysql:/var/lib/mysql - /data/conf:/etc/mysql/conf.d environment: MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} MYSQL_DATABASE: ${MYSQL_DATABASE} MYSQL_USER: ${MYSQL_USER} MYSQL_PASSWORD: ${MYSQL_PASSWORD} ports: - \"${MYSQL_PORT}:3306\" networks: - gogs gogs: container_name: gogs image: gogs/gogs:0.11.91 restart: always depends_on: - mysql-gogs ports: - \"${SSH_PORT}:22\" - \"${GOGS_PORT}:3000\" volumes: - /data/gogs-data:/data links: - mysql-gogs environment: - \"RUN_CROUD=true\" - SSH_PORT=${SSH_PORT} networks: - gogs networks: gogs: driver: bridge volumes: gogs-data: driver: local mysql-data: driver: local 上面用到的环境变量需放在文件名为.env的文件,并保证与docker-compose.yaml文件在同一目录下,内容如下: cat .env MYSQL_ROOT_PASSWORD=mysql_root_password MYSQL_DATABASE=gogs MYSQL_USER=gogs MYSQL_PASSWORD=gogs_password GOGS_PORT=3000 SSH_PORT=10022 MYSQL_PORT=3306 执行命令启动,并且验证是否启动成功 docker-compose up -d docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES bc08f4a4a4cc gogs/gogs:0.11.91 \"/app/gogs/docker/st…\" 12 days ago Up 12 days 0.0.0.0:3000-\u003e3000/tcp, 0.0.0.0:10022-\u003e22/tcp gogs b8ed2f175889 mysql:5.7 \"docker-entrypoint.s…\" 2 weeks ago Up 12 days 0.0.0.0:3306-\u003e3306/tcp, 33060/tcp mysql-gogs 2. HTTP运行Gogs 第一次在浏览器运行Gogs会需要填写一些初始化数据库配置等参数. 如下图: yum安装nginx并且配置实现反代 两套配置自己根据需求做调整,也可以自定义 #server { # listen 80; ## listen for ipv4 # server_name gogs.domain.com; # return 301 https://$server_name$request_uri; #} server { charset utf-8; client_max_body_size 300M; listen 80; # 或者 443，如果你使用 HTTPS 的话 # SSL support # ssl on; # ssl_certificate ./ssl/fullchain.cer; # ssl_certificate_key ./ssl/domain.com.key; server_name gogs.domain.com; location / { # 如果你希望通过子路径访问，此处修改为子路径，注意以 / 开头并以 / 结束 proxy_pass http://127.0.0.1:3000/; } } server { listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { proxy_pass http://127.0.0.1:3000/; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } 3. 部署过程参考文档 参考文档如下,向各位大佬学习 https://curder.gitbooks.io/blog/others/user-docker-deploy-gogs.html?q= https://github.com/Unknwon/wuwen.org/issues/12 https://blog.csdn.net/lcr_happy/article/details/103193958 https://clonote.com/archives/1552356953819 https://my.oschina.net/xsh1208/blog/3019458 #官方及其它使用文档如下: https://gogs.io/docs/installation/install_from_binary https://www.cnblogs.com/Sungeek/p/9203038.html ","date":"2020-06-12","objectID":"/docker-compose%E5%AE%9E%E7%8E%B0gogs%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/:0:0","tags":null,"title":"Docker Compose实现gogs服务部署","uri":"/docker-compose%E5%AE%9E%E7%8E%B0gogs%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"},{"categories":null,"content":"1. Dashboard前期部署 v1.16.2版本的k8s需要安装最新的2.0+ 版本Dashboard pwd /data/k8s-yaml/dashboard wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml 修改Service为NodePort类型,并且固定端口. vim recommended.yaml ...... apiVersion: v1 metadata: labels: k8s-app: kubernetes-dashboard name: kubernetes-dashboard namespace: kubernetes-dashboard spec: ports: - port: 443 targetPort: 8443 nodePort: 31666 #固定端口为31666,外部访问的. selector: k8s-app: kubernetes-dashboard type: NodePort #加上type=NodePort变成NodePort类型的服务 ...... 直接创建,新版的Dashboard默认安装在kubernetes-dashboard命名空间 kubectl apply -f recommended.yaml kubectl get pods -n kubernetes-dashboard -l k8s-app=kubernetes-dashboard NAME READY STATUS RESTARTS AGE kubernetes-dashboard-6b86b44f87-xhktr 1/1 Running 0 9h get svc -n kubernetes-dashboard NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE dashboard-metrics-scraper ClusterIP 10.96.150.213 \u003cnone\u003e 8000/TCP 9h kubernetes-dashboard NodePort 10.103.188.75 \u003cnone\u003e 443:31666/TCP 9h 2. Dashboard修改并支持chrome浏览器访问 要使用https方式,Chrome正常是不生效,下面修改,使其支持Chrome pwd /data/k8s-yaml/dashboard mkdir key \u0026\u0026 cd key #生成证书 openssl genrsa -out dashboard.key 2048 openssl req -new -out dashboard.csr -key dashboard.key -subj '/CN=10.8.8.8' openssl x509 -req -in dashboard.csr -signkey dashboard.key -out dashboard.crt #删除原有的证书secret,提供新老两种命名空间操作. kubectl delete secret kubernetes-dashboard-certs -n kube-system kubectl delete secret kubernetes-dashboard-certs -n kubernetes-dashboard #创建新的证书secret kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kube-system #创建新的证书secret kubectl create secret generic kubernetes-dashboard-certs --from-file=dashboard.key --from-file=dashboard.crt -n kubernetes-dashboard #查看pod kubectl get pod -n kube-system kubectl get pod -n kubernetes-dashboard #重启pod,记得要重启两个pod. kubectl delete pod \u003cpod name\u003e -n kube-system kubectl delete pod \u003cpod name\u003e -n kubernetes-dashboard kubectl delete pod dashboard-metrics-scraper-xxx -n xx kubectl delete pod kubernetes-dashboard-xxx -n xxx #最后验证重启成功 [root@kubernetes-master dashboard]# kubectl get pods -n kubernetes-dashboard NAME READY STATUS RESTARTS AGE dashboard-metrics-scraper-76585494d8-wlnrm 1/1 Running 0 9h kubernetes-dashboard-6b86b44f87-xhktr 1/1 Running 0 9h 3. 创建全局所有权用户 创建一个具有全局所有权限的用户来登录Dashboard: (admin.yaml) pwd /data/k8s-yaml/dashboard cat admin.yaml kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: admin annotations: rbac.authorization.kubernetes.io/autoupdate: \"true\" roleRef: kind: ClusterRole name: cluster-admin apiGroup: rbac.authorization.k8s.io subjects: - kind: ServiceAccount name: admin namespace: kubernetes-dashboard --- apiVersion: v1 kind: ServiceAccount metadata: name: admin namespace: kubernetes-dashboard 执行创建操作,用base64解码后的字符串作为 token 登录Dashboard,新版本新增了暗黑模式 kubectl apply -f admin.yaml kubectl get secret -n kubernetes-dashboard|grep admin-token admin-token-p28x5 kubernetes.io/service-account-token 3 10h kubectl get secret admin-token-p28x5 -o jsonpath={.data.token} -n kubernetes-dashboard |base64 -d #会生成一串很长的base64后的字符串 ","date":"2020-06-12","objectID":"/kubernetes%E9%83%A8%E7%BD%B2dashboard%E5%B9%B6%E6%94%AF%E6%8C%81chrome%E8%AE%BF%E9%97%AE/:0:0","tags":null,"title":"Kubernetes部署Dashboard并支持chrome访问","uri":"/kubernetes%E9%83%A8%E7%BD%B2dashboard%E5%B9%B6%E6%94%AF%E6%8C%81chrome%E8%AE%BF%E9%97%AE/"},{"categories":null,"content":"No.1 kubeadm安装单机版k8s前期准备 1个节点,Centos7.7系统,在节点上添加hosts信息 cat /etc/hosts 10.8.8.8 kubernetes-master 禁用防火墙,并且禁用SELINUX systemctl stop firewalld systemctl disable firewalld setenforce 0 sed -i 's/SELINUX=enforcing/SELINUX=disabled/' /etc/selinux/config 由于开启内核 ipv4 转发需加载 br_netfilter 模块,并创建文件/etc/sysctl.d/k8s.conf modprobe br_netfilter cat \u003c\u003c EOF \u003e /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sysctl -p /etc/sysctl.d/k8s.conf 安装 ipvs,创建脚本,保证在节点重启后能自动加载所需模块. cat \u003e /etc/sysconfig/modules/ipvs.modules \u003c\u003cEOF #!/bin/bash modprobe -- ip_vs modprobe -- ip_vs_rr modprobe -- ip_vs_wrr modprobe -- ip_vs_sh modprobe -- nf_conntrack_ipv4 EOF chmod 755 /etc/sysconfig/modules/ipvs.modules \u0026\u0026 bash /etc/sysconfig/modules/ipvs.modules \u0026\u0026 lsmod | grep -e ip_vs -e nf_conntrack_ipv4 确保节点上已安装 ipset 软件包,为便于查看 ipvs 的代理规则,安装管理工具 ipvsadm,同步服务器时间,公有云基本都会自带此功能 yum install -y ipset ipvsadm yum install chrony -y systemctl enable chronyd systemctl start chronyd chronyc sources 关闭swap分区相关操作,有的公有云同样也已经禁用,修改/etc/sysctl.d/k8s.conf添加下面一行,docker自动化安装部分参考本博客 swapoff -a vm.swappiness=0 sysctl -p /etc/sysctl.d/k8s.conf https://currylinux.github.io/docker%E5%92%8C%E5%AE%83%E5%85%84%E5%BC%9Fdockerer_compose/ cgroup 驱动以及配置Docker镜像,和指定/data/docker目录为Docker Root Dir,启动 Docker并设置开机自启 由于默认情况下kubelet使用的cgroupdriver是systemd,所以需要保持docker和kubelet的 cgroupdriver一致,我们这里修改docker的cgroupdriver=systemd.如果不修改docker则需要修改kubelet的启动配置,需要保证两者一致. mkdir -p /etc/docker cat /etc/docker/daemon.json { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"registry-mirrors\" : [ \"https://mirror.gcr.io\", #国外使用此仓库 \"https://ot2k4d59.mirror.aliyuncs.com/\" #国内使用此仓库 ], \"graph\": \"/data/docker\" } systemctl start docker systemctl enable docker 继续来安装 Kubeadm,通过指定yum源的方式来进行安装.并且推荐国内外两种源的方式 国外yum源: cat \u003c\u003cEOF \u003e /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg EOF ------------------------------------------------------------------------ 国内yum源: cat \u003c\u003cEOF \u003e /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=0 repo_gpgcheck=0 gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg EOF 然后安装 kubeadm、kubelet、kubectl,查看版本是否正确,并将kubelet设置成开机启动 --disableexcludes 禁掉除了kubernetes之外的别的仓库 yum install -y kubelet-1.16.2 kubeadm-1.16.2 kubectl-1.16.2 --disableexcludes=kubernetes kubeadm version systemctl enable --now kubelet No.2 kubeadm初始化相关步骤 初始化集群,在master节点配置kubeadm初始化文件,可以通过如下命令导出默认的初始化配置,并根据需求修改配置,flannel 网络插件需要将networking.podSubnet设为10.244.0.0/16 kubeadm config print init-defaults \u003e kubeadm.yaml cat kubeadm.yaml apiVersion: kubeadm.k8s.io/v1beta2 bootstrapTokens: - groups: - system:bootstrappers:kubeadm:default-node-token token: abcdef.0123456789abcdef ttl: 24h0m0s usages: - signing - authentication kind: InitConfiguration localAPIEndpoint: advertiseAddress: 10.8.8.8 #apiserver节点内网IP bindPort: 6443 nodeRegistration: criSocket: /var/run/dockershim.sock name: kubernetes-master #默认读取当前master节点的hostname taints: - effect: NoSchedule key: node-role.kubernetes.io/master --- apiServer: timeoutForControlPlane: 4m0s apiVersion: kubeadm.k8s.io/v1beta2 certificatesDir: /etc/kubernetes/pki clusterName: kubernetes controllerManager: {} dns: type: CoreDNS etcd: local: dataDir: /var/lib/etcd imageRepository: k8s.gcr.io #默认为google镜像仓库 imageRepository: registry.aliyuncs.com/google_containers #国内修改成阿里镜像源 kind: ClusterConfiguration kubernetesVersion: v1.16.0 networking: dnsDomain: cluster.local podSubnet: 10.244.0.0/16 #Pod网段,flannel插件需要使用这个网段 serviceSubnet: 10.96.0.0/12 scheduler: {} --- apiVersion: kubeproxy.config.k8s.io/v1alpha1 kind: KubeProxyCon","date":"2020-06-12","objectID":"/k8s%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2jenkins/:0:0","tags":null,"title":"K8s单机部署Jenkins","uri":"/k8s%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2jenkins/"},{"categories":null,"content":"No.1 Nexus 基本概念之组件 简单说明下Nexus,理解为私服仓库:本地maven私服加快构建速度 代理仓库:将公网等第三方提供的仓库代理到本地. 组件的相关概念,组件通常是各种文件的存放,具体见下图1和图2的文字介绍. No.2 Nexus 基本概念之资产 Assets-资产: 简单理解Maven当中的pom算是资产的一部分,包含元数据的重要补充. pom存档文件是与jar/war包组件相关联的资产. 具体了解请见下图的文字介绍. No.3 Nexus 仓库管理 仓库格式简单介绍,详细内容见下图1文字介绍. 下载机制,Maven从存储库下载组件同时,也会下载该组件的POM.参考下图2文字介绍. 中央仓库相关概念总结:组件元数据,释放稳定性,组件安全,性能.参考下图3文字介绍. No.4 准备Nexus compose文件 参考docker官方的compose的相关说明,并且辅助相关nexus博客进行操作. 此步骤操作前,需要安装docker和docker_compose,可以参考我博客里的安装步骤. compose相关内容一并附上: [root@xxx nexus]# cat docker-compose.yml version: \"3.8\" services: nexus3: restart: always image: sonatype/nexus3 container_name: nexus3 ports: - \"80:8081\" volumes: - data:/nexus-data logging: driver: \"json-file\" options: max-size: \"200k\" max-file: \"10\" volumes: data: No.5 启动Nexus,并验证成功与否 [root@xxx nexus]# docker-compose up -d [root@xxx nexus]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eeb6a8633273 sonatype/nexus3 \"sh -c ${SONATYPE_DI…\" About an hour ago Up About an hour 0.0.0.0:80-\u003e8081/tcp nexus3 验证安装是否成功: 地址:http://ip:port/ 用户名: admin 密码: admin123 新版本查看密码命令,并且将拿到的密码改为上面的密码: [root@sonarqube nexus]# cat /var/lib/docker/volumes/nexus_data/_data/admin.password de5bf74d-6340-43f8-8361-0f861833ccd2 参考文档 docker_compose官方文档: https://docs.docker.com/compose/compose-file/ nexus搭建maven私服: https://www.jianshu.com/p/62483b0505a5 Compose部署Nexus: https://blog.csdn.net/tiancxz/article/details/104197060 ","date":"2020-06-04","objectID":"/docker_compose%E9%83%A8%E7%BD%B2nexus/:0:0","tags":null,"title":"Docker_Compose部署Nexus","uri":"/docker_compose%E9%83%A8%E7%BD%B2nexus/"},{"categories":null,"content":"No.1 脚本化部署安装docker [root@xxx ~]# cat docker.sh #!/bin/bash DOCKER_VERSION=docker-ce-18.09.9 DOCKER_CLIENT=docker-ce-cli-18.09.9 # remove old version sudo yum remove -y docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine #remove all docker data sudo rm -rf /var/lib/docker #preinstall utils sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 # add repository sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo # make cache sudo yum makecache fast # install the latest stable version of docker yum list docker-ce --showduplicates | sort -r yum install -y ${DOCKER_VERSION} ${DOCKER_CLIENT} containerd.io # start deamon and enable auto start when power on sudo systemctl enable docker --now if [ $? = 0 ];then echo \"docker部署成功,请开始你的表演!\" else echo \"docker部署失败,请检查配置!\" \u0026\u0026 exit 2 fi 使用说明:直接将此脚本复制到Linux服务器上运行. 最后输入命令systemctl status docker,进行验证! No.2 手动安装Docker_Compose 参考docker官方文档步骤进行: https://docs.docker.com/compose/install/ 下载docker-compose稳定版本: sudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 将可执行权限应用于二进制文件: sudo chmod +x /usr/local/bin/docker-compose 做软链接进行路径指向: sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试安装是否成功: docker-compose -v docker-compose -h ","date":"2020-06-04","objectID":"/docker%E5%92%8C%E5%AE%83%E5%85%84%E5%BC%9Fdockerer_compose/:0:0","tags":null,"title":"Docker和它兄弟Dockerer_Compose","uri":"/docker%E5%92%8C%E5%AE%83%E5%85%84%E5%BC%9Fdockerer_compose/"},{"categories":null,"content":"第一章 简单说明 首先简单说明下,搭建过程容易,重点是主题的选择,下面也会附上我使用的主题地址. 有一点Linux基础的话,相对操作要容易一些.没有相关基础的,请认真看下搭建视频. 搭建的过程可能会遇到不少问题,希望不要放弃这个学习的过程. 第二章 搭建视频连接 亲测可行的B站视频连接: https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.videocard.0 只要正常按照此视频步骤搭建都可以轻松成功,国内的朋友可以通过码云(gitee.com)的方式也尝试下. 第三章 初始化hugo到github的简单步骤: 初始化命令: hugo --theme=LoveIt --baseUrl=\"https://currylinux.github.io/\" --buildDrafts 进入到此目录下: C:\\USER\\XXblog\\public git init git commit -m \"Hugo第一次提交博客\" git remote add origin https://github.com/currylinux/currylinux.github.io.git git push -u origin master 更新文章或其它内容到Github: 首先用Typora或者VScode打开要编辑的博客文章,修改完之后并保存. 使用本地预览命令: hugo server -D 进行查看本地是否变更,并将draft里的true改为false 继续在当前/目录下操作,提交git本地仓库: git add . \u0026\u0026 git commit -m \"add new post :xxx\" 运行hugo将修改更新到public目录: hugo 进入public目录,git一条龙(本地提交+发布到GitHub Pages上): cd public git add . git commit -m \"xx**xx\" git push 最后访问自己的博客地址,并且验证效果! 相关参考文献 博客模板使用地址: https://github.com/dillonzq/LoveIt/ 参考搭建视频博主博客: https://www.codesheep.cn LoveIt使用手册地址: https://hugoloveit.com/zh-cn/posts/ Hugo中文文档: https://www.gohugo.org/ Hugo英文官方文档: https://gohugo.io/documentation/ 写文章同步更新GitHub: http://xmasuhai.xyz/post/hugo/hugo%E5%85%A5%E9%97%A84%E5%86%99%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0github_%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/ ","date":"2020-06-04","objectID":"/hugo%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9Eblog/:0:0","tags":null,"title":"Hugo你的专属Blog","uri":"/hugo%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9Eblog/"}]