[{"categories":null,"content":"No.1 Nexus 基本概念之组件 简单说明下Nexus,理解为私服仓库:本地maven私服加快构建速度 代理仓库:将公网等第三方提供的仓库代理到本地. 组件的相关概念,组件通常是各种文件的存放,具体见下图1和图2的文字介绍. No.2 Nexus 基本概念之资产 Assets-资产: 简单理解Maven当中的pom算是资产的一部分,包含元数据的重要补充. pom存档文件是与jar/war包组件相关联的资产. 具体了解请见下图的文字介绍. No.3 Nexus 仓库管理 仓库格式简单介绍,详细内容见下图1文字介绍. 下载机制,Maven从存储库下载组件同时,也会下载该组件的POM.参考下图2文字介绍. 中央仓库相关概念总结:组件元数据,释放稳定性,组件安全,性能.参考下图3文字介绍. No.4 准备Nexus compose文件 参考docker官方的compose的相关说明,并且辅助相关nexus博客进行操作. 此步骤操作前,需要安装docker和docker_compose,可以参考我博客里的安装步骤. compose相关内容一并附上: [root@xxx nexus]# cat docker-compose.yml version: \"3.8\" services: nexus3: restart: always image: sonatype/nexus3 container_name: nexus3 ports: - \"80:8081\" volumes: - data:/nexus-data logging: driver: \"json-file\" options: max-size: \"200k\" max-file: \"10\" volumes: data: No.5 启动Nexus,并验证成功与否 [root@xxx nexus]# docker-compose up -d [root@xxx nexus]# docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES eeb6a8633273 sonatype/nexus3 \"sh -c ${SONATYPE_DI…\" About an hour ago Up About an hour 0.0.0.0:80-\u003e8081/tcp nexus3 验证安装是否成功: 地址:http://ip:port/ 用户名: admin 密码: admin123 新版本查看密码命令,并且将拿到的密码改为上面的密码: [root@sonarqube nexus]# cat /var/lib/docker/volumes/nexus_data/_data/admin.password de5bf74d-6340-43f8-8361-0f861833ccd2 参考文档 docker_compose官方文档: https://docs.docker.com/compose/compose-file/ nexus搭建maven私服: https://www.jianshu.com/p/62483b0505a5 Compose部署Nexus: https://blog.csdn.net/tiancxz/article/details/104197060 ","date":"2020-06-04","objectID":"/docker_compose%E9%83%A8%E7%BD%B2nexus/:0:0","tags":null,"title":"Docker_Compose部署Nexus","uri":"/docker_compose%E9%83%A8%E7%BD%B2nexus/"},{"categories":null,"content":"No.1 脚本化部署安装docker [root@xxx ~]# cat docker.sh #!/bin/bash DOCKER_VERSION=docker-ce-18.09.9 DOCKER_CLIENT=docker-ce-cli-18.09.9 # remove old version sudo yum remove -y docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-selinux \\ docker-engine-selinux \\ docker-engine #remove all docker data sudo rm -rf /var/lib/docker #preinstall utils sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 # add repository sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo # make cache sudo yum makecache fast # install the latest stable version of docker yum list docker-ce --showduplicates | sort -r yum install -y ${DOCKER_VERSION} ${DOCKER_CLIENT} containerd.io # start deamon and enable auto start when power on sudo systemctl enable docker --now if [ $? = 0 ];then echo \"docker部署成功,请开始你的表演!\" else echo \"docker部署失败,请检查配置!\" \u0026\u0026 exit 2 fi 使用说明:直接将此脚本复制到Linux服务器上运行. 最后输入命令systemctl status docker,进行验证! No.2 手动安装Docker_Compose 参考docker官方文档步骤进行: https://docs.docker.com/compose/install/ 下载docker-compose稳定版本: sudo curl -L \"https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 将可执行权限应用于二进制文件: sudo chmod +x /usr/local/bin/docker-compose 做软链接进行路径指向: sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试安装是否成功: docker-compose -v docker-compose -h ","date":"2020-06-04","objectID":"/docker%E5%92%8C%E5%AE%83%E5%85%84%E5%BC%9Fdockerer_compose/:0:0","tags":null,"title":"Docker和它兄弟Dockerer_Compose","uri":"/docker%E5%92%8C%E5%AE%83%E5%85%84%E5%BC%9Fdockerer_compose/"},{"categories":null,"content":"第一章 简单说明 首先简单说明下,搭建过程容易,重点是主题的选择,下面也会附上我使用的主题地址. 有一点Linux基础的话,相对操作要容易一些.没有相关基础的,请认真看下搭建视频. 搭建的过程可能会遇到不少问题,希望不要放弃这个学习的过程. 第二章 搭建视频连接 亲测可行的B站视频连接: https://www.bilibili.com/video/BV1Yb411a7ty/?spm_id_from=333.788.videocard.0 只要正常按照此视频步骤搭建都可以轻松成功,国内的朋友可以通过码云(gitee.com)的方式也尝试下. 第三章 初始化hugo到github的简单步骤: 初始化命令: hugo --theme=LoveIt --baseUrl=\"https://currylinux.github.io/\" --buildDrafts 进入到此目录下: C:\\USER\\XXblog\\public git init git commit -m \"Hugo第一次提交博客\" git remote add origin https://github.com/currylinux/currylinux.github.io.git git push -u origin master 更新文章或其它内容到Github: 首先用Typora或者VScode打开要编辑的博客文章,修改完之后并保存. 使用本地预览命令: hugo server -D 进行查看本地是否变更,并将draft里的true改为false 继续在当前/目录下操作,提交git本地仓库: git add . \u0026\u0026 git commit -m \"add new post :xxx\" 运行hugo将修改更新到public目录: hugo 进入public目录,git一条龙(本地提交+发布到GitHub Pages上): cd public git add . git commit -m \"xx**xx\" git push 最后访问自己的博客地址,并且验证效果! 相关参考文献 博客模板使用地址: https://github.com/dillonzq/LoveIt/ 参考搭建视频博主博客: https://www.codesheep.cn LoveIt使用手册地址: https://hugoloveit.com/zh-cn/posts/ Hugo中文文档: https://www.gohugo.org/ Hugo英文官方文档: https://gohugo.io/documentation/ 写文章同步更新GitHub: http://xmasuhai.xyz/post/hugo/hugo%E5%85%A5%E9%97%A84%E5%86%99%E6%96%87%E7%AB%A0%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0github_%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B/ ","date":"2020-06-04","objectID":"/hugo%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9Eblog/:0:0","tags":null,"title":"Hugo你的专属Blog","uri":"/hugo%E4%BD%A0%E7%9A%84%E4%B8%93%E5%B1%9Eblog/"}]